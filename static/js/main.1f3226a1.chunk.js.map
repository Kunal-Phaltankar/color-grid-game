{"version":3,"sources":["Colors/Node/Node.js","Colors/Colors.js","App.js","serviceWorker.js","index.js"],"names":["Node","state","randomNodeColor","styles","backgroundColor","this","props","color","isRandomNode","className","style","onClick","highlightMatchingColors","checkMatch","React","Component","Colors","handleLevels","gridSize","setState","highScore","handleChangeColor","grid","colorMatrix","anyColorFromColorMatrix","findMatch","score","event","console","log","initColorsGrid","minWidth","map","row","rowid","key","node","nodeid","col","getGridStyle","id","renderGrid","currentRow","currentRowColor","push","nodeCoordinates","randomColor","getRandomIndex","Math","random","toString","substr","modOf","parseInt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f3226a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends React.Component {\r\n\tstate = {\r\n\t\trandomNodeColor: null\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst styles = {\r\n\t\t\tbackgroundColor: this.props.color\r\n\t\t};\r\n\r\n\t\treturn this.props.isRandomNode ? (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"node randomnode\"\r\n\t\t\t\tstyle={styles}\r\n\t\t\t\tonClick={this.props.highlightMatchingColors}\r\n\t\t\t></div>\r\n\t\t) : (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"node\"\r\n\t\t\t\tstyle={styles}\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tthis.props.checkMatch(this.props.color);\r\n\t\t\t\t}}\r\n\t\t\t></div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport \"./Colors.css\";\r\nimport Node from \"./Node/Node\";\r\n\r\nexport default class Colors extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tgrid: [],\r\n\t\t\tcolorMatrix: [],\r\n\t\t\tanyColorFromColorMatrix: null,\r\n\t\t\tfindMatch: false,\r\n\t\t\tscore: 0,\r\n\t\t\tgridSize: 5,\r\n\t\t\thighScore: 0,\r\n\t\t};\r\n\r\n\t\tthis.highlightMatchingColors = (event) => {\r\n\t\t\tthis.setState({ findMatch: true });\r\n\t\t};\r\n\r\n\t\tthis.checkMatch = (color) => {\r\n\t\t\tif (color === this.state.anyColorFromColorMatrix) {\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tscore: this.state.score + 20,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tthis.state.score > this.state.highScore\r\n\t\t\t\t\t\t\t? this.setState({ highScore: this.state.score })\r\n\t\t\t\t\t\t\t: console.log(\r\n\t\t\t\t\t\t\t\t\t\"this.state.score <= this.state.highScore\"\r\n\t\t\t\t\t\t\t  );\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tthis.setState(initColorsGrid(this.state.gridSize));\r\n\t\t\t\tthis.setState({ findMatch: false });\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ score: this.state.score - 5 });\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst {\r\n\t\t\tgrid,\r\n\t\t\tcolorMatrix,\r\n\t\t\tanyColorFromColorMatrix,\r\n\t\t\tgridSize,\r\n\t\t} = initColorsGrid(this.state.gridSize);\r\n\r\n\t\tthis.setState({\r\n\t\t\tgrid,\r\n\t\t\tcolorMatrix,\r\n\t\t\tanyColorFromColorMatrix,\r\n\t\t\tgridSize,\r\n\t\t});\r\n\t}\r\n\r\n\thandleChangeColor() {\r\n\t\tthis.setState(initColorsGrid(this.state.gridSize));\r\n\t\tthis.setState({\r\n\t\t\tfindMatch: false,\r\n\t\t\tscore: 0,\r\n\t\t});\r\n\t}\r\n\r\n\thandleLevels = (gridSize) => {\r\n\t\tthis.setState({ gridSize, highScore: 0 }, function () {\r\n\t\t\tthis.handleChangeColor();\r\n\t\t});\r\n\t};\r\n\r\n\tgetGridStyle(gridSize) {\r\n\t\treturn { minWidth: gridSize === 5 ? 300 : gridSize === 10 ? 500 : 700 };\r\n\t}\r\n\r\n\trenderGrid() {\r\n\t\treturn (\r\n\t\t\t<div className=\"grid\">\r\n\t\t\t\t{this.state.grid.map((row, rowid) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={rowid}>\r\n\t\t\t\t\t\t\t{row.map((node, nodeid) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Node\r\n\t\t\t\t\t\t\t\t\t\tkey={nodeid}\r\n\t\t\t\t\t\t\t\t\t\trow={node.row}\r\n\t\t\t\t\t\t\t\t\t\tcol={node.col}\r\n\t\t\t\t\t\t\t\t\t\tcolor={\r\n\t\t\t\t\t\t\t\t\t\t\tthis.state.colorMatrix[node.row][\r\n\t\t\t\t\t\t\t\t\t\t\t\tnode.col\r\n\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tisRandomNode={\r\n\t\t\t\t\t\t\t\t\t\t\tthis.state.findMatch\r\n\t\t\t\t\t\t\t\t\t\t\t\t? this.state.colorMatrix[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode.row\r\n\t\t\t\t\t\t\t\t\t\t\t\t  ][node.col] ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t  this.state\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.anyColorFromColorMatrix\r\n\t\t\t\t\t\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tcheckMatch={this.checkMatch}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"Colors container\"\r\n\t\t\t\tstyle={this.getGridStyle(this.state.gridSize)}\r\n\t\t\t>\r\n\t\t\t\t<h3>Where Am I?</h3>\r\n\t\t\t\t<div className=\"score\">\r\n\t\t\t\t\t<label id=\"left\">Your Score: {this.state.score}</label>\r\n\t\t\t\t\t<label id=\"right\">HighScore: {this.state.highScore}</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"waves-effect waves-light btn\"\r\n\t\t\t\t\t\tonClick={() => this.handleChangeColor()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tChange Colors\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.renderGrid()}\r\n\t\t\t\t<Node\r\n\t\t\t\t\tisRandomNode={true}\r\n\t\t\t\t\tcolor={this.state.anyColorFromColorMatrix}\r\n\t\t\t\t\thighlightMatchingColors={this.highlightMatchingColors}\r\n\t\t\t\t></Node>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label id=\"info\">Find above tile in the Color Grid.</label>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"levels\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"waves-effect waves-teal btn-flat\"\r\n\t\t\t\t\t\tonClick={() => this.handleLevels(5)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tEasy\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"waves-effect waves-teal btn-flat\"\r\n\t\t\t\t\t\tonClick={() => this.handleLevels(10)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tMedium\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"waves-effect waves-teal btn-flat\"\r\n\t\t\t\t\t\tonClick={() => this.handleLevels(15)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tHard\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst initColorsGrid = (gridSize) => {\r\n\tconst grid = [];\r\n\tconst colorMatrix = [];\r\n\tfor (let row = 0; row < gridSize; row++) {\r\n\t\tconst currentRow = [];\r\n\t\tconst currentRowColor = [];\r\n\t\tfor (let col = 0; col < gridSize; col++) {\r\n\t\t\tcurrentRow.push(nodeCoordinates(row, col));\r\n\t\t\tcurrentRowColor.push(randomColor());\r\n\t\t}\r\n\t\tgrid.push(currentRow);\r\n\t\tcolorMatrix.push(currentRowColor);\r\n\t}\r\n\tconst anyColorFromColorMatrix =\r\n\t\tcolorMatrix[getRandomIndex(gridSize)][getRandomIndex(gridSize)];\r\n\treturn { grid, colorMatrix, anyColorFromColorMatrix, gridSize };\r\n};\r\n\r\nconst nodeCoordinates = (row, col) => {\r\n\treturn {\r\n\t\trow,\r\n\t\tcol,\r\n\t};\r\n};\r\n\r\nconst randomColor = () => \"#\" + Math.random().toString(16).substr(-6);\r\n\r\nconst getRandomIndex = (modOf) => {\r\n\treturn parseInt(Math.random().toString().substr(-1)) % modOf;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Colors from \"./Colors/Colors\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Colors />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}